{"version":3,"sources":["Grid.tsx","App.tsx","index.tsx"],"names":["Grid","props","containerRef","React","useRef","coordinate","setCoordinate","useState","x","y","containerMeta","setContainerMeta","width","height","gridContentStyle","cellWidth","columnCount","cellHeight","rowCount","useEffect","clientWidth","clientHeight","current","className","onScroll","evt","$grid","currentTarget","scrollTop","scrollLeft","Math","floor","ref","style","row","column","itemColumnPerWindow","itemRowPerWindow","cellList","i","j","top","left","push","position","renderCells","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAoFeA,MA3Ef,SAAcC,GACV,MAAMC,EAAeC,IAAMC,OAAuB,OAC3CC,EAAYC,GAAiBH,IAAMI,SAAS,CAC/CC,EAAG,EACHC,EAAG,KAGAC,EAAeC,GAAoBR,IAAMI,SAAS,CACrDK,MAAO,EACPC,OAAQ,IAGNC,EAAmB,CACrBF,MAAUX,EAAMc,UAAYd,EAAMe,YAA1B,KACRH,OAAWZ,EAAMgB,WAAahB,EAAMiB,SAA3B,MAoDb,OAjDAf,IAAMgB,WAAU,KACZ,MAAM,YAAEC,EAAF,aAAeC,GAAiBnB,EAAaoB,QACnDX,EAAiB,CACbC,MAAOQ,EACPP,OAAQQ,MAEb,IA4CC,qBAAKE,UAAU,iBAAiBC,SA1CpC,SAAkBC,GACd,MAAMC,EAAQD,EAAIE,eACZ,UAAEC,EAAF,WAAaC,GAAeH,EAC5BrB,EAAa,CACfG,EAAGsB,KAAKC,MAAMH,EAAY3B,EAAMgB,YAChCR,EAAGqB,KAAKC,MAAMF,EAAa5B,EAAMc,YAGrCT,EAAcD,IAkCsC2B,IAAK9B,EAAzD,SACI,qBAAKqB,UAAU,eAAeU,MAAOnB,EAArC,SAhCR,WACI,IAAMN,EAAG0B,EAAKzB,EAAG0B,GAAW9B,EAC5B,MAAM,MAAEO,EAAF,OAASC,GAAWH,EACpB0B,EAA4D,EAAtCN,KAAKC,MAAMnB,EAAQX,EAAMc,WAC/CsB,EAA2D,EAAxCP,KAAKC,MAAMlB,EAASZ,EAAMgB,YAE7CqB,EAAW,GACjB,IAAK,IAAIC,EAAIL,EAAKK,EAAIF,EAAmBH,EAAKK,IAC1C,IAAK,IAAIC,EAAIL,EAAQK,EAAIJ,EAAsBD,EAAQK,IAAK,CACxD,MAAMC,EAAMxC,EAAMgB,WAAasB,EACzBG,EAAOzC,EAAMc,UAAYyB,EAC/BF,EAASK,KACL,qBAEIpB,UAAU,YACVU,MAAO,CACHrB,MAAQ,GAAEX,EAAMc,cAChBF,OAAS,GAAEZ,EAAMgB,eACjB2B,SAAU,WACVF,KAAO,GAAEA,MACTD,IAAM,GAAEA,QAPN,GAAEF,KAAKC,MAc7B,OAAOF,EAMEO,QCvEFC,MAJf,WACI,OAAO,cAAC,EAAD,CAAM7B,WAAY,GAAIF,UAAW,IAAKG,SAAU,IAASF,YAAa,OCAjF+B,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,U","file":"static/js/main.73d941f6.chunk.js","sourcesContent":["import React from 'react'\n\ninterface IProps {\n    rowCount: number\n    columnCount: number\n    cellWidth: number\n    cellHeight: number\n}\n\nfunction Grid(props: IProps): JSX.Element {\n    const containerRef = React.useRef<HTMLDivElement>(null!)\n    const [coordinate, setCoordinate] = React.useState({\n        x: 0,\n        y: 0,\n    })\n\n    const [containerMeta, setContainerMeta] = React.useState({\n        width: 0,\n        height: 0,\n    })\n\n    const gridContentStyle = {\n        width: `${props.cellWidth * props.columnCount}px`,\n        height: `${props.cellHeight * props.rowCount}px`,\n    }\n\n    React.useEffect((): void => {\n        const { clientWidth, clientHeight } = containerRef.current\n        setContainerMeta({\n            width: clientWidth,\n            height: clientHeight,\n        })\n    }, [])\n\n    function onScroll(evt: React.UIEvent<HTMLDivElement>): void {\n        const $grid = evt.currentTarget\n        const { scrollTop, scrollLeft } = $grid\n        const coordinate = {\n            x: Math.floor(scrollTop / props.cellHeight),\n            y: Math.floor(scrollLeft / props.cellWidth),\n        }\n\n        setCoordinate(coordinate)\n    }\n\n    function renderCells(): JSX.Element[] {\n        let { x: row, y: column } = coordinate\n        const { width, height } = containerMeta\n        const itemColumnPerWindow = Math.floor(width / props.cellWidth) * 2\n        const itemRowPerWindow = Math.floor(height / props.cellHeight) * 2\n\n        const cellList = []\n        for (let i = row; i < itemRowPerWindow + row; i++) {\n            for (let j = column; j < itemColumnPerWindow + column; j++) {\n                const top = props.cellHeight * i\n                const left = props.cellWidth * j\n                cellList.push(\n                    <div\n                        key={`${i}-${j}`}\n                        className=\"cell-item\"\n                        style={{\n                            width: `${props.cellWidth}px`,\n                            height: `${props.cellHeight}px`,\n                            position: 'absolute',\n                            left: `${left}px`,\n                            top: `${top}px`,\n                        }}\n                    ></div>,\n                )\n            }\n        }\n\n        return cellList\n    }\n\n    return (\n        <div className=\"grid-container\" onScroll={onScroll} ref={containerRef}>\n            <div className=\"grid-content\" style={gridContentStyle}>\n                {renderCells()}\n            </div>\n        </div>\n    )\n}\n\nexport default Grid\n","import './App.scss'\nimport Grid from './Grid'\n\nfunction App(): JSX.Element {\n    return <Grid cellHeight={40} cellWidth={140} rowCount={1000000} columnCount={1000000} />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}